generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int          @id @default(autoincrement())
  username String       @unique
  nickname String
  games    Game[]
  players  UserPlayer[]
}

model UserPlayer {
  id      Int    @id @default(autoincrement())
  ownerId Int
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
}

model Game {
  id             String        @id @default(uuid())
  ownerId        Int
  creationDate   DateTime      @default(now())
  isTerminated   Boolean       @default(false)
  owner          User          @relation(fields: [ownerId], references: [id])
  playersInOrder GamePlayer[]
  roundResults   RoundResult[]
  roundDraft     RoundDraft?
}

model RoundDraft {
  id         Int      @id @default(autoincrement())
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String   @unique
  roundIndex Int
  callIndex  Int?
  isInError  Boolean?
  isFixing   Boolean?
  calls RoundDraftCall[]
  results RoundDraftResult[]
}

model RoundDraftCall {
  id     Int    @id @default(autoincrement())
  call Int
  roundDraftId Int
  roundDraft RoundDraft @relation(fields: [roundDraftId], references: [id], onDelete: Cascade)
}

model RoundDraftResult {
  id     Int    @id @default(autoincrement())
  result Int
  roundDraftId Int
  roundDraft RoundDraft @relation(fields: [roundDraftId], references: [id], onDelete: Cascade)
}

model GamePlayer {
  id     Int    @id @default(autoincrement())
  gameId String
  name   String
  weight Int
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model RoundResult {
  id                 Int                 @id @default(autoincrement())
  weight             Int
  gameId             String
  playerRoundResults PlayerRoundResult[]
  game               Game                @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model PlayerRoundResult {
  id            Int         @id @default(autoincrement())
  player        String
  roundResultId Int
  call          Int
  result        Int
  roundResult   RoundResult @relation(fields: [roundResultId], references: [id], onDelete: Cascade)
}
